const $id = (s)=>document.getElementById(s);
const $content = $id('content');
const $loader  = $id('loader');
const $toast   = $id('toast');
const $home    = $id('homePanel');
const $appArea = $id('appArea');

function showLoading(on=true){ if($loader) $loader.style.display = on ? 'flex' : 'none'; }
function toast(text, ms=1800){ if(!$toast) return; $toast.textContent = text; $toast.style.display='block'; setTimeout(()=>{$toast.style.display='none'}, ms); }
async function api(url, init){
  try{
    showLoading(true);
    const r = await fetch(url, init);
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return await r.json().catch(()=> ({}));
  }catch(e){ console.error(e); toast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'); throw e; }
  finally{ showLoading(false); }
}
function esc(s=''){ return String(s).replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&gt;','>':'&gt;','"':'&quot;', "'":'&#39;' }[m]) ); }

let tgUser = null;
try{
  const TG = window.Telegram?.WebApp;
  if (TG){ TG.ready?.(); TG.expand?.(); tgUser = TG.initDataUnsafe?.user || null; }
}catch{}

function rawIdFromInitData(){
  try{
    const raw = window.Telegram?.WebApp?.initData || '';
    const m = raw.match(/user=([^&]+)/);
    return m ? (JSON.parse(decodeURIComponent(m[1]))?.id || null) : null;
  }catch{ return null; }
}
const urlTid = new URLSearchParams(location.search).get('tid');
const CURRENT_TG_ID = (tgUser?.id) || rawIdFromInitData() || (urlTid ? Number(urlTid) : null);

const ViewStack = [];
function navigate(viewFn){
  if ($home.style.display !== 'none') {
    $home.style.display = 'none';
    $appArea.style.display = 'block';
  }
  ViewStack.push(viewFn);
  viewFn();
}
function goBackOrHome(){
  if (ViewStack.length > 1){
    ViewStack.pop();
    const top = ViewStack[ViewStack.length - 1];
    top && top();
  } else {
    $appArea.style.display = 'none';
    $home.style.display = 'flex';
  }
}

function headerHTML(title){
  return `
    <div class="cb-header">
      <div class="cb-header__row">
        <button class="cb-back" id="cbBack">‚Üê</button>
        <h2 class="cb-title">${esc(title)}</h2>
      </div>
      <div class="cb-sep"></div>
    </div>`;
}
function mountHeaderBack(){ const b = $id('cbBack'); if (b) b.onclick = goBackOrHome; }

async function initHome(){
  const logo = $id('masterLogo');
  const nameEl = $id('masterName');
  if (tgUser?.first_name){
    nameEl.textContent = `${tgUser.first_name} ${tgUser.last_name||''}`.trim();
    logo.textContent = (tgUser.first_name[0] || 'M').toUpperCase();
  }

  if (!CURRENT_TG_ID){
    $id('noTid').style.display = 'block';
    bindHomeButtons();
    return;
  }

  try{
    const r = await api(`/api/masters/by_telegram/?telegram_id=${CURRENT_TG_ID}`);
    if (r?.exists && r.master){
      nameEl.textContent = r.master.name || nameEl.textContent;
      logo.textContent = (r.master.name||'M').trim().charAt(0).toUpperCase();
    } else {
      const probableName = tgUser ? `${tgUser.first_name||''} ${tgUser.last_name||''}`.trim() : '';
      if (probableName){
        await api('/api/masters/register/', {
          method:'POST', headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ name: probableName, telegram_id: CURRENT_TG_ID })
        });
      }
    }
  }catch(_){}

  try{
    const q = new URLSearchParams({ telegram_id: CURRENT_TG_ID, period: 'today' });
    const resp = await api(`/api/bookings/for_master/?${q.toString()}`);
    const s = resp?.summary || {total:0,pending:0};
    $id('statTotal').textContent   = s.total ?? 0;
    $id('statPending').textContent = s.pending ?? 0;
  }catch(_){}

  bindHomeButtons();
}

function bindHomeButtons(){
  const tap = (btn, fn)=>{
    btn.addEventListener('click', ()=>{
      btn.style.transform='scale(0.97)';
      setTimeout(()=>btn.style.transform='', 120);
      fn();
    });
  };
  document.querySelectorAll('[data-act="appointments"]').forEach(b=> tap(b, ()=>navigate(()=>showBookings('today',''))));
  document.querySelectorAll('[data-act="profile"]').forEach(b=> tap(b, ()=>navigate(showProfile)));
  document.querySelectorAll('[data-act="services"]').forEach(b=> tap(b, ()=>navigate(showServicesManager)));
  document.querySelectorAll('[data-act="calendar"]').forEach(b=> tap(b, ()=>navigate(showCalendar)));
}

async function showBookings(period='today', status=''){
  if (!CURRENT_TG_ID){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }

  $content.innerHTML = `
    ${headerHTML('–ó–∞–ø–∏—Å–∏')}
    <div class="cb-wrap">
      <div class="booking-item">
        <div class="filters-tabs">
          <button class="filter-tab" data-filter="today">–°–µ–≥–æ–¥–Ω—è</button>
          <button class="filter-tab" data-filter="tomorrow">–ó–∞–≤—Ç—Ä–∞</button>
          <button class="filter-tab" data-filter="week">–ù–µ–¥–µ–ª—è</button>
          <button class="filter-tab" data-filter="month">–ú–µ—Å—è—Ü</button>
          <button class="filter-tab" data-filter="all">–í—Å–µ</button>
        </div>

        <div class="stats-grid-3">
          <div class="stat-card">
            <div class="stat-number confirmed" id="confirmedCount">0</div>
            <div class="stat-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</div>
          </div>
          <div class="stat-card">
            <div class="stat-number pending" id="pendingCount">0</div>
            <div class="stat-label">–û–∂–∏–¥–∞–µ—Ç</div>
          </div>
          <div class="stat-card">
            <div class="stat-number rejected" id="rejectedCount">0</div>
            <div class="stat-label">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>
          </div>
        </div>

        <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap;margin-top:4px">
          <span style="opacity:.8;font-size:13px">–°—Ç–∞—Ç—É—Å:</span>
          <button class="backbtn" data-status="">–í—Å–µ</button>
          <button class="backbtn" data-status="pending">–û–∂–∏–¥–∞–Ω–∏–µ</button>
          <button class="backbtn" data-status="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</button>
          <button class="backbtn" data-status="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</button>

          <button id="addBookingBtn" class="tg-btn" style="margin-left:auto">+ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</button>
        </div>
      </div>

      <div id="appointmentsList" class="appointments-list" style="margin-top:10px"></div>

      <div id="emptyState" class="empty-state" style="display:none">
        <div class="empty-icon">üìÖ</div>
        <div class="empty-title">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>
        <div class="empty-subtitle">–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
      </div>
    </div>`;
  mountHeaderBack();
  $id('addBookingBtn').onclick = ()=> navigate(showManualBooking);

  const statusText = (st)=> st==='pending'?'–û–∂–∏–¥–∞–µ—Ç':(st==='confirmed'?'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ':'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ');
  const initials = (name)=> String(name||'').split(' ').map(n=>n[0]||'').join('').toUpperCase().slice(0,2) || 'CL';

  const tabs = [...document.querySelectorAll('.filter-tab')];
  const setActiveTab = (key)=>{
    tabs.forEach(t=> t.classList.toggle('active', t.dataset.filter===key));
  };
  setActiveTab(period);

  const buildQuery = ()=>{
    const q = new URLSearchParams({ telegram_id: CURRENT_TG_ID });
    if (['today','tomorrow','week'].includes(period)) q.set('period', period);
    if (status) q.set('status', status);
    return q;
  };
  const resp = await api(`/api/bookings/for_master/?${buildQuery().toString()}`);
  const itemsRaw = resp.items || resp || [];
  let items = itemsRaw;

  const summary = resp.summary || (()=>{
    const s = {confirmed:0,pending:0,rejected:0};
    items.forEach(i=> s[i.status] = (s[i.status]||0)+1);
    s.total = items.length; return s;
  })();
  $id('confirmedCount').textContent = summary.confirmed ?? 0;
  $id('pendingCount').textContent   = summary.pending ?? 0;
  $id('rejectedCount').textContent  = summary.rejected ?? 0;

  const listEl = $id('appointmentsList');
  const emptyEl = $id('emptyState');
  const render = ()=>{
    const filtered = status ? items.filter(a=>a.status===status) : items;

    listEl.innerHTML = '';
    if (!filtered.length){
      listEl.style.display='none';
      emptyEl.style.display='block';
      return;
    }
    listEl.style.display='flex';
    emptyEl.style.display='none';

    filtered.forEach((a, idx)=>{
      const card = document.createElement('div');
      card.className = `appointment-card ${a.status}`;
      card.style.animationDelay = `${idx*0.05}s`;
      card.innerHTML = `
        <div class="appointment-status status-${a.status}">${statusText(a.status)}</div>

        <div class="appointment-header">
          <div class="client-avatar">${initials(a.name || a.clientName)}</div>
          <div class="appointment-info">
            <div class="client-name">${esc(a.name || a.clientName || '–ö–ª–∏–µ–Ω—Ç')}</div>
            <div class="appointment-service">${esc(a.slot?.service?.name || a.service || '‚Äî')}</div>
            <div class="appointment-time">${a.slot ? new Date(a.slot.time).toLocaleString() : (esc(a.time||'‚Äî'))}</div>
          </div>
        </div>

        ${a.status==='pending' ? `
        <div class="appointment-actions">
          <button class="action-button accept-button" data-accept="${a.id}">–ü—Ä–∏–Ω—è—Ç—å</button>
          <button class="action-button reject-button" data-reject="${a.id}">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        </div>` : ``}
      `;
      listEl.appendChild(card);
    });

    listEl.querySelectorAll('[data-accept]').forEach(btn=>{
      btn.onclick = async ()=>{
        await api(`/api/bookings/${btn.dataset.accept}/confirm/`, {method:'POST'});
        toast('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
        showBookings(period, status);
      };
    });
    listEl.querySelectorAll('[data-reject]').forEach(btn=>{
      btn.onclick = async ()=>{
        await api(`/api/bookings/${btn.dataset.reject}/reject/`, {method:'POST'});
        toast('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        showBookings(period, status);
      };
    });
  };
  render();

  tabs.forEach(t=>{
    t.addEventListener('click', ()=>{
      period = t.dataset.filter;
      setActiveTab(period);
      showBookings(period, status);
    });
  });

  document.querySelectorAll('[data-status]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      status = btn.dataset.status;
      showBookings(period, status);
    });
  });
}

async function showManualBooking(){
  if (!CURRENT_TG_ID){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }

  // 1) –ü–æ–¥—Ç—è–Ω–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
  let services = [];
  try { services = await api(`/api/services/my/?telegram_id=${CURRENT_TG_ID}`); } catch(_){ services = []; }

  $content.innerHTML = `
    ${headerHTML('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å')}
    <div class="cb-wrap">
      <div class="booking-item">
        <div style="display:grid;gap:10px">
          <div>
            <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</label>
            <input id="nbFirst" class="input" type="text" placeholder="–ò–≤–∞–Ω">
          </div>
          <div>
            <label>–§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞</label>
            <input id="nbLast" class="input" type="text" placeholder="–ò–≤–∞–Ω–æ–≤">
          </div>
          <div>
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è (—É—Å–ª—É–≥–∞)</label>
            <select id="nbService" class="input">
              ${services.map(s=>`<option value="${s.id}">${esc(s.name)}</option>`).join('')}
            </select>
          </div>

          <div id="nbSlotWrap">
            <label>–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç</label>
            <select id="nbSlot" class="input"><option value="">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</option></select>
            <div id="nbNoSlots" style="display:none;opacity:.8;margin-top:6px">
              –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ú–æ–∂–Ω–æ <button id="nbAddOneBtn" class="backbtn">–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</button>.
            </div>
          </div>

          <div id="nbAddOnePanel" class="booking-item" style="display:none">
            <b>–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–æ—Ç</b>
            <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
              <input id="nbOneDT" class="input" type="datetime-local">
              <button id="nbOneAdd" class="tg-btn">–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</button>
              <button id="nbOneCancel" class="backbtn">–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>

          <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:6px">
            <button id="nbCreate" class="tg-btn">–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å</button>
            <button id="nbCancel" class="backbtn">–û—Ç–º–µ–Ω–∞</button>
          </div>
        </div>
      </div>
    </div>
  `;
  mountHeaderBack();

  const $svc = $id('nbService');
  const $slot = $id('nbSlot');
  const $no  = $id('nbNoSlots');
  const $addPanel = $id('nbAddOnePanel');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ —É—Å–ª—É–≥–µ
  async function loadFreeSlots(serviceId){
    $slot.innerHTML = `<option value="">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</option>`;
    $no.style.display = 'none';

    let slots = [];
    try { slots = await api(`/api/slots/?service=${serviceId}`); } catch(_){ slots = []; }
    const free = (slots||[]).filter(s=>!s.is_booked);

    if (!free.length){
      $slot.innerHTML = `<option value="">–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</option>`;
      $no.style.display = 'block';
    } else {
      $slot.innerHTML = free
        .sort((a,b)=> new Date(a.time)-new Date(b.time))
        .map(s=>`<option value="${s.id}">${new Date(s.time).toLocaleString()}</option>`)
        .join('');
    }
  }

  // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  if (services.length){
    loadFreeSlots(services[0].id);
  }

  // –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Å–ª—É–≥–∏ ‚Äî –∑–∞–Ω–æ–≤–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã
  $svc.onchange = ()=> loadFreeSlots(Number($svc.value));

  // –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  $id('nbAddOneBtn')?.addEventListener('click', ()=> { $addPanel.style.display='block'; });
  $id('nbOneCancel')?.addEventListener('click', ()=> { $addPanel.style.display='none'; });

  // –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Å–ª–æ—Ç
  $id('nbOneAdd').onclick = async ()=>{
    const dt = $id('nbOneDT').value;
    const sid = Number($svc.value);
    if (!sid){ toast('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É'); return; }
    if (!dt){ toast('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è'); return; }

    try{
      await api('/api/slots/', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ service: sid, time: new Date(dt).toISOString() })
      });
      toast('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
      $addPanel.style.display='none';
      await loadFreeSlots(sid); // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
    }catch(_){ toast('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞'); }
  };

  // —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
  $id('nbCreate').onclick = async ()=>{
    const first = $id('nbFirst').value.trim();
    const last  = $id('nbLast').value.trim();
    const name  = (first || last) ? `${first} ${last}`.trim() : '';
    const slotId= Number($slot.value);

    if (!name){ toast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞'); return; }
    if (!slotId){ toast('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç'); return; }

    try{
      await api('/api/bookings/', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({
          slot_id: slotId,
          name: name,
          // telegram_id –∏ –ø—Ä–æ—á–µ–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º ‚Äî —ç—Ç–æ ¬´—Ä—É—á–Ω–∞—è¬ª –∑–∞–ø–∏—Å—å
        })
      });
      toast('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');
      navigate(()=> showBookings('today','')); // –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    }catch(e){
      toast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å');
    }
  };

  $id('nbCancel').onclick = goBackOrHome;
}
async function showProfile(){
  if (!CURRENT_TG_ID){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }
  let v = {};
  try{ v = await api(`/api/masters/me/?telegram_id=${CURRENT_TG_ID}`); }catch{}

  $content.innerHTML = `
    ${headerHTML('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')}
    <div class="cb-wrap">
      <div class="booking-item">
        <label>–ò–º—è</label>
        <input id="pName" class="input" type="text" value="${esc(v.name||'')}">

        <label style="margin-top:8px">–û–ø–∏—Å–∞–Ω–∏–µ</label>
        <textarea id="pBio" class="input" rows="4">${esc(v.bio||'')}</textarea>

        <label style="margin-top:8px">–¢–µ–ª–µ—Ñ–æ–Ω</label>
        <input id="pPhone" class="input" type="tel" placeholder="+998 xx xxx xx xx" value="${esc(v.phone||'')}">

        <label style="margin-top:8px">–ê–≤–∞—Ç–∞—Ä URL</label>
        <input id="pAvatar" class="input" type="url" placeholder="https://..." value="${esc(v.avatar_url||'')}">

        <div style="margin-top:12px;display:flex;gap:8px;flex-wrap:wrap">
          <button id="pSave" class="tg-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button id="pCancel" class="backbtn">–û—Ç–º–µ–Ω–∞</button>
        </div>
      </div>
    </div>`;
  mountHeaderBack();
  $id('pCancel').onclick = goBackOrHome;

  $id('pSave').onclick = async ()=>{
    const payload = {
      telegram_id: CURRENT_TG_ID,
      name:  $id('pName').value.trim(),
      bio:   $id('pBio').value.trim(),
      phone: $id('pPhone').value.trim(),
      avatar_url: $id('pAvatar').value.trim()
    };
    if (!payload.name){ toast('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'); return; }
    try{
      await api('/api/masters/me_update/', { method:'PATCH', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
      toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'); showProfile();
    }catch{}
  };
}

// ==== –ú–æ–∏ —É—Å–ª—É–≥–∏ (—Å –º–æ–¥–∞–ª–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤) ====
async function showServicesManager(){
  if (!CURRENT_TG_ID){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }

  // —Ç—è–Ω–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
  let services = [];
  try{ services = await api(`/api/services/my/?telegram_id=${CURRENT_TG_ID}`); }
  catch(_){ services = []; }

  // UI
  $content.innerHTML = `
    ${headerHTML('–ú–æ–∏ —É—Å–ª—É–≥–∏')}
    <div class="cb-wrap">

      <div class="add-service-card">
        <h3 class="add-service-title">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É</h3>
        <button class="add-service-button" id="btnOpenAddService">+ –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É</button>
      </div>

      <div id="svcList" class="services-list"></div>
      <div id="svcEmpty" class="booking-item" style="display:none;text-align:center;opacity:.8">
        <div style="font-size:36px">‚ú®</div>
        <div style="font-weight:800;margin-top:4px">–ü–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥</div>
        <div style="font-size:13px;opacity:.85">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø–∏—Å–∏</div>
      </div>
    </div>

    <!-- –ú–æ–¥–∞–ª–∫–∞: –Ω–æ–≤–∞—è —É—Å–ª—É–≥–∞ -->
    <div id="addServiceModal" class="modal">
      <div class="modal-content">
        <div class="modal-title">–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞</div>
        <div class="form-group">
          <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</label>
          <input id="mSvcName" class="form-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è">
        </div>
        <div class="form-group">
          <label class="form-label">–¶–µ–Ω–∞ (‚ÇΩ)</label>
          <input id="mSvcPrice" class="form-input" type="number" placeholder="1500">
        </div>
        <div class="form-group">
          <label class="form-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)</label>
          <input id="mSvcDuration" class="form-input" type="number" placeholder="60">
        </div>
        <div class="modal-actions">
          <button class="modal-button secondary-button" id="mSvcCancel">–û—Ç–º–µ–Ω–∞</button>
          <button class="modal-button primary-button" id="mSvcCreate">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
      </div>
    </div>

    <!-- –ú–æ–¥–∞–ª–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç -->
    <div id="addSlotModal" class="modal">
      <div class="modal-content">
        <div class="modal-title">–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</div>
        <div class="form-group">
          <label class="form-label">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
          <input id="mSlotTime" class="form-input" type="time" value="10:00">
        </div>
        <div class="form-group">
          <label class="form-label">–î–Ω–∏ –Ω–µ–¥–µ–ª–∏</label>
          <select id="mSlotDays" class="form-input">
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏</option>
            <option value="weekdays">–ë—É–¥–Ω–∏ (–ü–Ω‚Äì–ü—Ç)</option>
            <option value="weekends">–í—ã—Ö–æ–¥–Ω—ã–µ (–°–±‚Äì–í—Å)</option>
            <option value="all">–í—Å–µ –¥–Ω–∏</option>
            <option value="monday">–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</option>
            <option value="tuesday">–í—Ç–æ—Ä–Ω–∏–∫</option>
            <option value="wednesday">–°—Ä–µ–¥–∞</option>
            <option value="thursday">–ß–µ—Ç–≤–µ—Ä–≥</option>
            <option value="friday">–ü—è—Ç–Ω–∏—Ü–∞</option>
            <option value="saturday">–°—É–±–±–æ—Ç–∞</option>
            <option value="sunday">–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</option>
          </select>
        </div>
        <div class="modal-actions">
          <button class="modal-button secondary-button" id="mSlotCancel">–û—Ç–º–µ–Ω–∞</button>
          <button class="modal-button primary-button" id="mSlotAdd">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
      </div>
    </div>
  `;
  mountHeaderBack();

  const svcList  = document.getElementById('svcList');
  const svcEmpty = document.getElementById('svcEmpty');
  const addServiceModal = document.getElementById('addServiceModal');
  const addSlotModal    = document.getElementById('addSlotModal');

  let currentServiceId = null;

  const getServiceIcon = (name='')=>{
    if (name.includes('–°—Ç—Ä–∏–∂–∫–∞')) return '‚úÇÔ∏è';
    if (name.includes('–û–∫—Ä–∞—à'))  return 'üé®';
    if (name.includes('–ú–∞–Ω–∏–∫'))  return 'üíÖ';
    if (name.includes('–ü–µ–¥–∏–∫'))  return 'ü¶∂';
    if (name.includes('–ú–∞—Å—Å–∞–∂')) return 'üíÜ';
    return '‚ú®';
  };

  const render = ()=>{
    svcList.innerHTML = '';
    if (!services?.length){
      svcEmpty.style.display = 'block';
      return;
    }
    svcEmpty.style.display = 'none';

    services.forEach((s, idx)=>{
      const slotsHTML = Array.isArray(s.slots) && s.slots.length
        ? s.slots.map(sl=>`<span class="slot-tag">${esc(sl)}</span>`).join('')
        : `<div class="no-slots">–°–ª–æ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</div>`;

      const card = document.createElement('div');
      card.className = 'service-card';
      card.style.animationDelay = `${idx*0.05}s`;
      card.innerHTML = `
        <div class="service-menu">
          <button class="menu-button" data-del="${s.id}" title="–£–¥–∞–ª–∏—Ç—å">‚ãÆ</button>
        </div>

        <div class="service-header">
          <div class="service-icon">${getServiceIcon(s.name)}</div>
          <div class="service-info">
            <div class="service-name">${esc(s.name)}</div>
            <div class="service-details">
              <span>${s.price ? esc(s.price)+' ‚ÇΩ' : '‚Äî ‚ÇΩ'}</span>
              <span>${s.duration ? esc(s.duration)+' –º–∏–Ω' : '‚Äî –º–∏–Ω'}</span>
            </div>
          </div>
        </div>

        <div class="service-actions">
          <div class="slots-title">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:</div>
          <div class="slots-list">${slotsHTML}</div>
          <button class="add-slot-button" data-addslot="${s.id}">+ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</button>
        </div>
      `;
      svcList.appendChild(card);
    });

    // —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç DELETE /api/services/{id}/)
    svcList.querySelectorAll('[data-del]').forEach(btn=>{
      btn.onclick = async ()=>{
        const id = Number(btn.dataset.del);
        const svc = services.find(x=>x.id===id);
        if (!svc) return;
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É "${svc.name}"?`)) return;
        try{
          await api(`/api/services/${id}/`, { method:'DELETE' });
        }catch(_){ /* –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –º–æ–ª—á–∏–º */ }
        // –ª–æ–∫–∞–ª—å–Ω–æ —É–±–µ—Ä—ë–º
        services = services.filter(x=>x.id!==id);
        render();
        toast('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
      };
    });

    // –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
    svcList.querySelectorAll('[data-addslot]').forEach(btn=>{
      btn.onclick = ()=>{
        currentServiceId = Number(btn.dataset.addslot);
        openModal(addSlotModal);
      };
    });
  };

  render();

  // ====== –º–æ–¥–∞–ª–∫–∏ ======
  function openModal(m){ m?.classList.add('active'); }
  function closeModal(m){ m?.classList.remove('active'); }

  document.getElementById('btnOpenAddService').onclick = ()=> openModal(addServiceModal);
  document.getElementById('mSvcCancel').onclick = ()=> closeModal(addServiceModal);
  document.getElementById('mSlotCancel').onclick = ()=> closeModal(addSlotModal);

  // –∫–ª–∏–∫ –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã—Ç—å
  [addServiceModal, addSlotModal].forEach(m=>{
    m.addEventListener('click', (e)=>{ if(e.target===m) closeModal(m); });
  });

  // —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É
  document.getElementById('mSvcCreate').onclick = async ()=>{
    const name = document.getElementById('mSvcName').value.trim();
    const price = Number(document.getElementById('mSvcPrice').value || 0);
    const duration = Number(document.getElementById('mSvcDuration').value || 0);
    if (!name) return toast('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');

    // —Ç–≤–æ–π –±–µ–∫ —Ç–æ—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç name + telegram_id; price/duration –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å ‚Äî –µ—Å–ª–∏ –ª–∏—à–Ω–µ–µ, –æ–Ω –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
    await api('/api/services/create_by_master/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ telegram_id: CURRENT_TG_ID, name, price, duration })
    });
    toast('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    closeModal(addServiceModal);

    // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫
    try{ services = await api(`/api/services/my/?telegram_id=${CURRENT_TG_ID}`); } catch(_){}
    render();
  };

  // –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã
  document.getElementById('mSlotAdd').onclick = async ()=>{
    if (!currentServiceId) return;
    const time = document.getElementById('mSlotTime').value;
    const days = document.getElementById('mSlotDays').value;
    if (!time || !days) return toast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–Ω–∏');

    // —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –∫ –º–∞—Å—Å–∏–≤—É weekday (0=–ü–Ω ... 6=–í—Å) –¥–ª—è bulk_generate
    const mapDays = {
      weekdays:[0,1,2,3,4],
      weekends:[5,6],
      all:[0,1,2,3,4,5,6],
      monday:[0], tuesday:[1], wednesday:[2], thursday:[3],
      friday:[4], saturday:[5], sunday:[6],
    };
    const weekdays = mapDays[days] || [];

    // –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥)
    const start = new Date();                             // —Å–µ–≥–æ–¥–Ω—è
    const end   = new Date(Date.now() + 30*86400000);     // +30 –¥–Ω–µ–π
    const startISO = start.toISOString().slice(0,10);
    const endISO   = end.toISOString().slice(0,10);

    try{
      await api('/api/slots/bulk_generate/', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({
          service: currentServiceId,
          start_date: startISO,
          end_date: endISO,
          times: [time],          // –æ–¥–∏–Ω —Ç–∞–π–º –∏–∑ –º–æ–¥–∞–ª–∫–∏
          weekdays                // –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        })
      });
      toast('–°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
    }catch(_){ toast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤'); }

    closeModal(addSlotModal);

    // –ø–æ–¥—Ç—è–Ω–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ (—á—Ç–æ–±—ã –ø–µ—Ä–µ—á–µ–Ω—å ¬´—Å–ª–æ—Ç–æ–≤¬ª –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–∂–µ –æ–±–Ω–æ–≤–∏–ª—Å—è)
    try{ services = await api(`/api/services/my/?telegram_id=${CURRENT_TG_ID}`); } catch(_){}
    render();
  };
}

async function showSlotsManager(serviceId){
  const slots = await api(`/api/slots/for_service/?service=${serviceId}`);

  $content.innerHTML = `
    ${headerHTML('–°–ª–æ—Ç—ã —É—Å–ª—É–≥–∏')}
    <div class="cb-wrap">
      <div class="booking-item">
        <label>–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–æ—Ç</label>
        <input id="oneDT" class="input" type="datetime-local">
        <button id="oneAdd" class="tg-btn" style="margin-top:8px">–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div class="booking-item" style="margin-top:10px">
        <label><b>–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b></label>
        <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
          <input id="gStart" type="date" class="input">
          <input id="gEnd"   type="date" class="input">
          <input id="gTimes" type="text" class="input" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 11:30, 15:00">
        </div>
        <div style="margin-top:6px">
          <label>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</label>
          <label><input type="checkbox" class="gDay" value="0" checked> –ü–Ω</label>
          <label><input type="checkbox" class="gDay" value="1" checked> –í—Ç</label>
          <label><input type="checkbox" class="gDay" value="2" checked> –°—Ä</label>
          <label><input type="checkbox" class="gDay" value="3" checked> –ß—Ç</label>
          <label><input type="checkbox" class="gDay" value="4" checked> –ü—Ç</label>
          <label><input type="checkbox" class="gDay" value="5" checked> –°–±</label>
          <label><input type="checkbox" class="gDay" value="6" checked> –í—Å</label>
        </div>
        <button id="gRun" class="tg-btn" style="margin-top:8px">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
      </div>

      <h3 style="color:#fff;margin:12px 0 8px">–°–ª–æ—Ç—ã</h3>
      <div id="slotList"></div>
    </div>`;
  mountHeaderBack();

  $id('oneAdd').onclick = async ()=>{
    const v = $id('oneDT').value; if(!v) return toast('–£–∫–∞–∂–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è');
    await api('/api/slots/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ service: serviceId, time: new Date(v).toISOString() })
    });
    toast('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω'); showSlotsManager(serviceId);
  };

  $id('gRun').onclick = async ()=>{
    const start = $id('gStart').value, end = $id('gEnd').value, timesStr = $id('gTimes').value;
    if (!start || !end || !timesStr) return toast('–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    const times = timesStr.split(',').map(s=>s.trim()).filter(Boolean);
    const weekdays = Array.from(document.querySelectorAll('.gDay:checked')).map(i=>Number(i.value));
    await api('/api/slots/bulk_generate/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ service: serviceId, start_date:start, end_date:end, times, weekdays })
    });
    toast('–°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã'); showSlotsManager(serviceId);
  };

  const list = $id('slotList');
  if (!slots.length){ list.innerHTML = '<div class="booking-item">–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>'; return; }
  list.innerHTML = '';
  slots.forEach(s=>{
    const el = document.createElement('div'); el.className = 'booking-item';
    el.innerHTML = `
      ${new Date(s.time).toLocaleString()} ‚Ä¢ ${s.is_booked ? '–∑–∞–Ω—è—Ç' : '—Å–≤–æ–±–æ–¥–µ–Ω'}
      ${s.is_booked ? '' : `<button class="backbtn" data-id="${s.id}" style="float:right">–£–¥–∞–ª–∏—Ç—å</button>`}
    `;
    list.appendChild(el);
  });
  list.querySelectorAll('[data-id]').forEach(b=>{
    b.onclick = async ()=>{
      await api(`/api/slots/${b.dataset.id}/`, { method:'DELETE' });
      toast('–£–¥–∞–ª–µ–Ω–æ'); showSlotsManager(serviceId);
    };
  });
}

async function showCalendar(year, month){
  if (!CURRENT_TG_ID){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }
  const now = new Date();
  year  = year  || now.getFullYear();
  month = month || (now.getMonth()+1);

  const data = await api(`/api/slots/calendar/?telegram_id=${CURRENT_TG_ID}&year=${year}&month=${month}`);
  const days = data.days || [];

  $content.innerHTML = `
    ${headerHTML('–ö–∞–ª–µ–Ω–¥–∞—Ä—å')}
    <div class="cb-wrap">
      <div class="booking-item" style="display:flex;gap:8px;align-items:center;justify-content:space-between">
        <button id="calPrev" class="backbtn">‚Üê</button>
        <div><b>${year}</b> ‚Ä¢ <b>${String(month).padStart(2,'0')}</b></div>
        <button id="calNext" class="backbtn">‚Üí</button>
      </div>
      <div id="grid" style="display:grid;grid-template-columns:repeat(7,1fr);gap:6px;margin-top:10px"></div>
      <div id="dayBox" class="booking-item" style="margin-top:12px; display:none"></div>
    </div>`;
  mountHeaderBack();
  $id('calPrev').onclick = ()=>{ let y=year, m=month-1; if(m<1){m=12;y--;} showCalendar(y,m); };
  $id('calNext').onclick = ()=>{ let y=year, m=month+1; if(m>12){m=1;y++;} showCalendar(y,m); };

  const grid = $id('grid'); grid.innerHTML='';
  days.forEach(d=>{
    const el = document.createElement('div');
    el.className = 'booking-item';
    el.innerHTML = `<div style="font-weight:700">${d.date.slice(-2)}</div>
                    <div style="font-size:12px;margin-top:4px">üü¢ ${d.free} &nbsp; üî¥ ${d.busy}</div>`;
    el.style.cursor='pointer';
    el.onclick = ()=> showDay(d);
    grid.appendChild(el);
  });

  async function showDay(d){
    const box = $id('dayBox'); box.style.display='block';
    const iso = d.date; const pretty = iso.split('-').reverse().join('.');

    box.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <h3 style="margin:0;color:#fff">–î–µ–Ω—å: ${pretty}</h3>
        <button id="dayHide" class="backbtn">–°–∫—Ä—ã—Ç—å</button>
      </div>
      <div class="booking-item" style="margin-top:8px">
        <label>–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</label>
        <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
          <select id="svcSel" class="input" style="min-width:160px"></select>
          <input id="timeInp" class="input" type="time" value="10:00">
          <button id="addSlot" class="tg-btn">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
      </div>
      <div id="slotsList" style="margin-top:8px"></div>`;
    $id('dayHide').onclick = ()=>{ box.style.display='none'; };

    const services = await api(`/api/services/my/?telegram_id=${CURRENT_TG_ID}`);
    $id('svcSel').innerHTML = services.map(s=>`<option value="${s.id}">${esc(s.name)}</option>`).join('');

    renderSlots(d.slots);

    $id('addSlot').onclick = async ()=>{
      const svc = Number($id('svcSel').value);
      const timeHHMM = $id('timeInp').value;
      if (!svc || !timeHHMM) return toast('–ó–∞–ø–æ–ª–Ω–∏ —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è');
      await api('/api/slots/', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ service: svc, time: new Date(`${iso}T${timeHHMM}:00`).toISOString() })
      });
      toast('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω'); showCalendar(year, month);
      setTimeout(async ()=>{
        const fresh = await api(`/api/slots/calendar/?telegram_id=${CURRENT_TG_ID}&year=${year}&month=${month}`);
        const nd = (fresh.days||[]).find(x=>x.date===iso) || {slots:[]};
        showDay(nd);
      }, 60);
    };
  }

  function renderSlots(slots){
    const list = $id('slotsList');
    if (!slots?.length){ list.innerHTML='<div class="booking-item">–°–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>'; return; }
    list.innerHTML='';
    slots.sort((a,b)=> new Date(a.time)-new Date(b.time));
    slots.forEach(s=>{
      const el = document.createElement('div'); el.className='booking-item';
      el.innerHTML = `
        ${new Date(s.time).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})}
        ‚Ä¢ ${esc(s.service)} ‚Ä¢ ${s.is_booked ? '–∑–∞–Ω—è—Ç' : '—Å–≤–æ–±–æ–¥–µ–Ω'}
        ${s.is_booked ? '' : `<button class="backbtn" data-id="${s.id}" style="float:right">–£–¥–∞–ª–∏—Ç—å</button>`}
      `;
      list.appendChild(el);
    });
    list.querySelectorAll('[data-id]').forEach(b=>{
      b.onclick = async ()=>{
        await api(`/api/slots/${b.dataset.id}/`, {method:'DELETE'});
        toast('–£–¥–∞–ª–µ–Ω–æ'); b.closest('.booking-item')?.remove();
      };
    });
  }
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initHome);
} else {
  initHome();
}

window.navigate = navigate;
window.showBookings = showBookings;
window.showProfile = showProfile;
window.showServicesManager = showServicesManager;
window.showCalendar = showCalendar;
