/* MASTER_JS_VERSION = 10 */

/* ========== DOM helpers ========== */
const $ = (id) => document.getElementById(id);
const $content = $('content');
const $loader  = $('loader');
const $toast   = $('toast');
const $back    = $('backBtn');

function showLoading(on=true){ if($loader) $loader.style.display = on ? 'flex' : 'none'; }
function toast(text, ms=1800){ if(!$toast) return; $toast.textContent = text; $toast.style.display='block'; setTimeout(()=>{$toast.style.display='none'}, ms); }
async function api(url, init){
  try{ showLoading(true); const r = await fetch(url, init); if(!r.ok) throw new Error(`HTTP ${r.status}`); return await r.json().catch(()=>({})); }
  catch(e){ console.error(e); toast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'); throw e; }
  finally{ showLoading(false); }
}
function esc(s=''){ return String(s).replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;', "'":'&#39;' }[m])); }

/* ========== Telegram ID (3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞) ========== */
let tgUser = null;
try {
  if (window.Telegram && window.Telegram.WebApp) {
    Telegram.WebApp.expand(); Telegram.WebApp.ready();
    tgUser = Telegram.WebApp.initDataUnsafe?.user || null;
    document.body.style.background = Telegram.WebApp.backgroundColor || '#17212b';
    document.body.style.color = Telegram.WebApp.textColor || '#e7eef7';
  }
} catch(_) {}

function rawIdFromInitData(){
  try{
    const raw = window.Telegram?.WebApp?.initData || '';
    const m = raw.match(/user=([^&]+)/);
    if (!m) return null;
    return JSON.parse(decodeURIComponent(m[1]))?.id || null;
  }catch{ return null; }
}
const urlTid = new URLSearchParams(location.search).get('tid'); // —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
const CURRENT_TG_ID =
  (tgUser && tgUser.id) ||
  rawIdFromInitData() ||
  (urlTid ? Number(urlTid) : null);

// –ø—Ä–æ—Ñ–∏–ª—å (–≤–∏–∑—É–∞–ª)
if (tgUser && $('profile')) {
  $('profile').innerHTML =
    `<img src="${tgUser.photo_url}" style="width:48px;height:48px;border-radius:50%;box-shadow:0 2px 8px #0004;"><br>
     <b>${esc(tgUser.first_name||'')} ${esc(tgUser.last_name||'')}</b>`;
} else if (!tgUser && urlTid && $('profile')) {
  $('profile').innerHTML = `<b>–ú–∞—Å—Ç–µ—Ä #${esc(urlTid)}</b>`;
}

/* ========== mini-router ========== */
const ViewStack = [];
function navigate(viewFn){
  ViewStack.push(viewFn);
  if ($back) $back.style.display = ViewStack.length>1 ? 'inline-block' : 'none';
  viewFn();
}
$back?.addEventListener('click', ()=>{
  if (ViewStack.length > 1) ViewStack.pop();
  const top = ViewStack.length ? ViewStack[ViewStack.length - 1] : null;
  (top || autoEntry)();
});

/* ========== –∞–≤—Ç–æ-–≤—Ö–æ–¥ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ========== */
async function ensureMaster(){
  const tid = CURRENT_TG_ID;
  if (!tid) return { ok:false, reason:'no_tg_id' };

  const r = await api(`/api/masters/by_telegram/?telegram_id=${tid}`);
  if (r?.exists) return { ok:true, master:r.master };

  // —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  $content.innerHTML = `
    <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞</h2>
    <div class="booking-item">
      <label>–ò–º—è</label>
      <input id="regName" type="text" class="input"
             value="${tgUser ? esc((tgUser.first_name||'') + (tgUser.last_name ? (' ' + tgUser.last_name) : '')) : ''}">
      <button id="regBtn" class="tg-btn" style="margin-top:10px">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
    </div>`;
  $('regBtn').onclick = async ()=>{
    const name = $('regName').value.trim();
    if (!name) { toast('–£–∫–∞–∂–∏—Ç–µ –∏–º—è'); return; }
    await api('/api/masters/register/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ name, telegram_id: tid })
    });
    toast('–ì–æ—Ç–æ–≤–æ'); autoEntry(); // –ø–æ–≤—Ç–æ—Ä–∏–º –≤—Ö–æ–¥
  };
  return { ok:false, reason:'need_register' };
}

/* ========== —ç–∫—Ä–∞–Ω—ã ========== */
async function autoEntry(){
  const res = await ensureMaster();
  if (res.ok) navigate(showHome);
  else if (res.reason === 'no_tg_id') {
    $content.innerHTML = `
      <div class="booking-item">
        <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.</b><br>
        –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ.<br>
        –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ?tid=–í–ê–®_ID –∫ URL.
      </div>`;
  }
}

function showHome(){
  $content.innerHTML = `
    <div style="display:flex; gap:10px; flex-wrap:wrap">
      <button id="showBookingsBtn" class="tg-btn">–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏</button>
      <button id="profileBtn" class="backbtn">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</button>
      <button id="servicesBtn" class="backbtn">–£—Å–ª—É–≥–∏ –∏ —Å–ª–æ—Ç—ã</button>
      <button id="calendarBtn" class="backbtn">–ö–∞–ª–µ–Ω–¥–∞—Ä—å</button>
    </div>`;
  $('showBookingsBtn').onclick = async ()=>{ const m=await ensureMaster(); if(m?.ok) navigate(()=>showBookings('today','')); };
  $('profileBtn').onclick      = async ()=>{ const m=await ensureMaster(); if(m?.ok) navigate(showProfile); };
  $('servicesBtn').onclick     = async ()=>{ const m=await ensureMaster(); if(m?.ok) navigate(showServicesManager); };
  $('calendarBtn').onclick     = async ()=>{ const m=await ensureMaster(); if(m?.ok) navigate(showCalendar); };
}

async function showCalendar(year, month){
  const tid = CURRENT_TG_ID; if(!tid){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }
  const now = new Date();
  year  = year  || now.getFullYear();
  month = month || (now.getMonth()+1);

  const data = await api(`/api/slots/calendar/?telegram_id=${tid}&year=${year}&month=${month}`);
  const days = data.days || [];

  // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–µ—Ç–∫–∞
  $content.innerHTML = `
    <h2>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
    <div style="display:flex; gap:8px; align-items:center; margin-bottom:8px">
      <button id="calPrev" class="backbtn">‚Üê</button>
      <div><b>${year}</b> ‚Ä¢ <b>${month.toString().padStart(2,'0')}</b></div>
      <button id="calNext" class="backbtn">‚Üí</button>
    </div>
    <div id="grid" style="display:grid;grid-template-columns:repeat(7,1fr);gap:6px"></div>
    <div id="dayBox" class="booking-item" style="margin-top:12px; display:none"></div>
  `;

  $('calPrev').onclick = ()=> {
    let y = year, m = month-1; if (m<1){ m=12; y--; }
    showCalendar(y,m);
  };
  $('calNext').onclick = ()=> {
    let y = year, m = month+1; if (m>12){ m=1; y++; }
    showCalendar(y,m);
  };

  const grid = $('grid');
  grid.innerHTML = '';
  days.forEach(d=>{
    const el = document.createElement('div');
    el.className = 'booking-item';
    const dateStr = d.date.slice(-2); // DD
    el.innerHTML = `
      <div style="font-weight:bold">${dateStr}</div>
      <div style="font-size:12px;margin-top:4px">üü¢ ${d.free} &nbsp; üî¥ ${d.busy}</div>
    `;
    el.style.cursor = 'pointer';
    el.onclick = ()=> showDay(d);
    grid.appendChild(el);
  });

  async function showDay(d){
    const box = $('dayBox');
    box.style.display = 'block';
    const iso = d.date; // YYYY-MM-DD
    const pretty = iso.split('-').reverse().join('.');

    // —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ + –±—ã—Å—Ç—Ä–∞—è —Ñ–æ—Ä–º–∞
    box.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <h3>–î–µ–Ω—å: ${pretty}</h3>
        <button id="dayHide" class="backbtn">–°–∫—Ä—ã—Ç—å</button>
      </div>
      <div class="booking-item">
        <label>–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç</label>
        <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
          <select id="svcSel" class="input" style="min-width:160px"></select>
          <input id="timeInp" class="input" type="time" value="10:00">
          <button id="addSlot" class="tg-btn">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
      </div>
      <div id="slotsList"></div>
    `;
    $('dayHide').onclick = ()=> { box.style.display='none'; };

    // —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
    const services = await api(`/api/services/my/?telegram_id=${tid}`);
    const sel = $('svcSel');
    sel.innerHTML = services.map(s=>`<option value="${s.id}">${esc(s.name)}</option>`).join('');

    // –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫
    renderSlots(d.slots);

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
    $('addSlot').onclick = async ()=>{
      const svc = Number(sel.value);
      const timeHHMM = $('timeInp').value; // "HH:MM"
      if (!svc || !timeHHMM) return toast('–ó–∞–ø–æ–ª–Ω–∏ —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è');

      // —Å–æ–±–µ—Ä—ë–º ISO –≤ –ª–æ–∫–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isoLocal = new Date(`${iso}T${timeHHMM}:00`);
      await api('/api/slots/', {
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ service: svc, time: isoLocal.toISOString() })
      });
      toast('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
      // –æ–±–Ω–æ–≤–∏–º –¥–µ–Ω—å –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      showCalendar(year, month);
      // –∏ —Å–Ω–æ–≤–∞ —Ä–∞—Å–∫—Ä–æ–µ–º –¥–µ–Ω—å
      setTimeout(async ()=> {
        const fresh = await api(`/api/slots/calendar/?telegram_id=${tid}&year=${year}&month=${month}`);
        const nd = (fresh.days || []).find(x=>x.date===iso) || {slots:[]};
        showDay(nd);
      }, 50);
    };
  }

  function renderSlots(slots){
    const list = $('slotsList');
    if (!list) return;
    if (!slots || !slots.length){
      list.innerHTML = '<div class="booking-item">–°–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>';
      return;
    }
    list.innerHTML = '';
    slots.sort((a,b)=> new Date(a.time) - new Date(b.time));
    slots.forEach(s=>{
      const el = document.createElement('div'); el.className='booking-item';
      el.innerHTML = `
        ${new Date(s.time).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}
        ‚Ä¢ ${esc(s.service)} ‚Ä¢ ${s.is_booked ? '–∑–∞–Ω—è—Ç' : '—Å–≤–æ–±–æ–¥–µ–Ω'}
        ${s.is_booked ? '' : `<button class="backbtn" data-id="${s.id}" style="float:right">–£–¥–∞–ª–∏—Ç—å</button>`}
      `;
      list.appendChild(el);
    });
    list.querySelectorAll('button[data-id]').forEach(b=>{
      b.onclick = async ()=>{
        await api(`/api/slots/${b.dataset.id}/`, {method:'DELETE'});
        toast('–£–¥–∞–ª–µ–Ω–æ');
        // –º—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –≤—ã–∫–∏–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç
        b.closest('.booking-item').remove();
      };
    });
  }
}


async function showSlotsManager(serviceId){
  const slots = await api(`/api/slots/for_service/?service=${serviceId}`);

  $content.innerHTML = `
    <h2>–°–ª–æ—Ç—ã —É—Å–ª—É–≥–∏</h2>
    <div class="booking-item">
      <label>–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–æ—Ç</label>
      <input id="oneDT" class="input" type="datetime-local">
      <button id="oneAdd" class="tg-btn" style="margin-top:8px">–î–æ–±–∞–≤–∏—Ç—å</button>
    </div>

    <div class="booking-item">
      <label><b>–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b></label>
      <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
        <input id="gStart" type="date" class="input">
        <input id="gEnd"   type="date" class="input">
        <input id="gTimes" type="text" class="input" placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 11:30, 15:00">
      </div>
      <div style="margin-top:6px">
        <label>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</label>
        <label><input type="checkbox" class="gDay" value="0" checked> –ü–Ω</label>
        <label><input type="checkbox" class="gDay" value="1" checked> –í—Ç</label>
        <label><input type="checkbox" class="gDay" value="2" checked> –°—Ä</label>
        <label><input type="checkbox" class="gDay" value="3" checked> –ß—Ç</label>
        <label><input type="checkbox" class="gDay" value="4" checked> –ü—Ç</label>
        <label><input type="checkbox" class="gDay" value="5" checked> –°–±</label>
        <label><input type="checkbox" class="gDay" value="6" checked> –í—Å</label>
      </div>
      <button id="gRun" class="tg-btn" style="margin-top:8px">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
    </div>

    <h3>–°–ª–æ—Ç—ã</h3>
    <div id="slotList"></div>
  `;

  // –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–æ—Ç
  $('oneAdd').onclick = async ()=>{
    const v = $('oneDT').value; if(!v) return toast('–£–∫–∞–∂–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è');
    // –ª–æ–∫–∞–ª—å–Ω–æ–µ -> ISO
    const iso = new Date(v).toISOString();
    await api('/api/slots/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ service: serviceId, time: iso })
    });
    toast('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω'); showSlotsManager(serviceId);
  };

  // –º–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  $('gRun').onclick = async ()=>{
    const start = $('gStart').value, end = $('gEnd').value, timesStr = $('gTimes').value;
    if (!start || !end || !timesStr) return toast('–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    const times = timesStr.split(',').map(s=>s.trim()).filter(Boolean);
    const weekdays = Array.from(document.querySelectorAll('.gDay:checked')).map(i=>Number(i.value));
    await api('/api/slots/bulk_generate/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ service: serviceId, start_date:start, end_date:end, times, weekdays })
    });
    toast('–°–ª–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã'); showSlotsManager(serviceId);
  };

  // —Å–ø–∏—Å–æ–∫
  const list = $('slotList');
  if (!slots.length){ list.innerHTML = '<div class="booking-item">–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>'; return; }
  list.innerHTML = '';
  slots.forEach(s=>{
    const el = document.createElement('div'); el.className = 'booking-item';
    el.innerHTML = `
      ${new Date(s.time).toLocaleString()} ‚Ä¢ ${s.is_booked ? '–∑–∞–Ω—è—Ç' : '—Å–≤–æ–±–æ–¥–µ–Ω'}
      ${s.is_booked ? '' : `<button class="backbtn" data-id="${s.id}" style="float:right">–£–¥–∞–ª–∏—Ç—å</button>`}
    `;
    list.appendChild(el);
  });
  list.querySelectorAll('button[data-id]').forEach(b=>{
    b.onclick = async ()=>{
      await api(`/api/slots/${b.dataset.id}/`, { method:'DELETE' });
      toast('–£–¥–∞–ª–µ–Ω–æ'); showSlotsManager(serviceId);
    };
  });
}


async function showServicesManager(){
  const tid = CURRENT_TG_ID; if(!tid){ toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }
  const services = await api(`/api/services/my/?telegram_id=${tid}`);

  $content.innerHTML = `
    <h2>–ú–æ–∏ —É—Å–ª—É–≥–∏</h2>
    <div class="booking-item">
      <label>–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞</label>
      <input id="svcName" class="input" placeholder="–ù–∞–ø—Ä. –°—Ç—Ä–∏–∂–∫–∞">
      <button id="svcCreate" class="tg-btn" style="margin-top:8px">–°–æ–∑–¥–∞—Ç—å</button>
    </div>
    <div id="svcList"></div>
  `;

  $('svcCreate').onclick = async ()=>{
    const name = $('svcName').value.trim();
    if (!name) return toast('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    await api('/api/services/create_by_master/', {
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ telegram_id: tid, name })
    });
    toast('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'); showServicesManager();
  };

  const list = $('svcList');
  if (!services.length){ list.innerHTML = '<h3>–ü–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥</h3>'; return; }
  services.forEach(s=>{
    const el = document.createElement('div'); el.className = 'booking-item';
    el.innerHTML = `<b>${s.name}</b><br><button class="backbtn" data-id="${s.id}">–°–ª–æ—Ç—ã</button>`;
    list.appendChild(el);
  });
  list.querySelectorAll('button[data-id]').forEach(b=>{
    b.onclick = ()=> navigate(()=>showSlotsManager(Number(b.dataset.id)));
  });
}

async function showBookings(period='today', status=''){
  if (!CURRENT_TG_ID) { toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }

  // —Ñ–∏–ª—å—Ç—Ä—ã + –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  $content.innerHTML = `
    <div style="display:flex;gap:8px;margin-bottom:12px;flex-wrap:wrap">
      <button class="backbtn" data-p="today">–°–µ–≥–æ–¥–Ω—è</button>
      <button class="backbtn" data-p="tomorrow">–ó–∞–≤—Ç—Ä–∞</button>
      <button class="backbtn" data-p="week">–ù–µ–¥–µ–ª—è</button>
      <select id="statusSel" class="backbtn">
        <option value="">–í—Å–µ</option>
        <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
        <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</option>
        <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</option>
      </select>
    </div>
    <div id="summary" style="margin:6px 0 12px;"></div>
    <div id="list"></div>`;
  document.querySelectorAll('[data-p]').forEach(b=> b.onclick = ()=> showBookings(b.dataset.p, $('statusSel').value));
  $('statusSel').value = status; $('statusSel').onchange = (e)=> showBookings(period, e.target.value);

  // –¥–∞–Ω–Ω—ã–µ
  const q = new URLSearchParams({ telegram_id: CURRENT_TG_ID, period });
  if (status) q.append('status', status);
  const resp = await api(`/api/bookings/for_master/?${q.toString()}`);

  const s = resp.summary || {total:0,pending:0,confirmed:0,rejected:0};
  $('summary').innerHTML = `–í—Å–µ–≥–æ: <b>${s.total}</b> ‚Ä¢ ‚è≥ ${s.pending} ‚Ä¢ ‚úÖ ${s.confirmed} ‚Ä¢ ‚ùå ${s.rejected}`;

  const items = resp.items || resp || [];
  const list = $('list');
  if (!items.length){ list.innerHTML = '<h2>–ù–µ—Ç –±—Ä–æ–Ω–µ–π</h2>'; return; }

  const map = {pending:'–û–∂–∏–¥–∞–Ω–∏–µ', confirmed:'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ', rejected:'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'};
  list.innerHTML = '';
  items.forEach(b=>{
    const d = document.createElement('div'); d.className='booking-item';
    d.innerHTML = `
      <b>–ö–ª–∏–µ–Ω—Ç:</b> ${esc(b.name)}<br>
      <b>–£—Å–ª—É–≥–∞:</b> ${esc(b.slot?.service?.name ?? '‚Äî')}<br>
      <b>–í—Ä–µ–º—è:</b> ${b.slot ? new Date(b.slot.time).toLocaleString() : '‚Äî'}<br>
      <div style="margin-top:6px">${map[b.status] ?? ''}</div>
      ${b.status === 'pending' ? `
        <div style="margin-top:10px">
          <button class="confirm-btn" data-id="${b.id}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
          <button class="reject-btn" data-id="${b.id}">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        </div>` : ''}
      <hr>`;
    list.appendChild(d);
  });

  // –¥–µ–π—Å—Ç–≤–∏—è
  document.querySelectorAll('.confirm-btn').forEach(btn=> btn.onclick = async ()=>{
    await api(`/api/bookings/${btn.dataset.id}/confirm/`, {method:'POST'});
    toast('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'); showBookings(period, status);
  });
  document.querySelectorAll('.reject-btn').forEach(btn=> btn.onclick = async ()=>{
    await api(`/api/bookings/${btn.dataset.id}/reject/`, {method:'POST'});
    toast('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'); showBookings(period, status);
  });
}

async function showProfile(){
  const tid = CURRENT_TG_ID;
  if (!tid) { toast('–û—Ç–∫—Ä–æ–π —á–µ—Ä–µ–∑ Telegram'); return; }

  let v = {};
  try { v = await api(`/api/masters/me/?telegram_id=${tid}`); } catch(_){ v = {}; }

  $content.innerHTML = `
    <h2>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
    <div class="booking-item">
      <label>–ò–º—è</label>
      <input id="pName" class="input" type="text" value="${esc(v.name||'')}">
      <label style="margin-top:8px">–û–ø–∏—Å–∞–Ω–∏–µ</label>
      <textarea id="pBio" class="input" rows="4">${esc(v.bio||'')}</textarea>
      <label style="margin-top:8px">–¢–µ–ª–µ—Ñ–æ–Ω</label>
      <input id="pPhone" class="input" type="tel" placeholder="+998 xx xxx xx xx" value="${esc(v.phone||'')}">
      <label style="margin-top:8px">–ê–≤–∞—Ç–∞—Ä URL</label>
      <input id="pAvatar" class="input" type="url" placeholder="https://..." value="${esc(v.avatar_url||'')}">
      <div style="margin-top:12px;display:flex;gap:8px;flex-wrap:wrap">
        <button id="pSave" class="tg-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button id="pBack" class="backbtn">–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  `;

  $('pBack').onclick = ()=>{
    if (ViewStack.length > 1) {
      ViewStack.pop();
      const top = ViewStack.length ? ViewStack[ViewStack.length - 1] : null;
      (top || showHome)();
    } else { showHome(); }
  };

  $('pSave').onclick = async ()=>{
    const payload = {
      telegram_id: tid,
      name: $('pName').value.trim(),
      bio: $('pBio').value.trim(),
      phone: $('pPhone').value.trim(),
      avatar_url: $('pAvatar').value.trim()
    };
    if (!payload.name) { toast('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'); return; }
    try{
      await api('/api/masters/me_update/', {
        method:'PATCH', headers:{'Content-Type':'application/json'},
        body: JSON.stringify(payload)
      });
      toast('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'); showProfile();
    }catch(_){}
  };
}

/* ========== —Å—Ç–∞—Ä—Ç ========== */
if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', autoEntry);
else autoEntry();
